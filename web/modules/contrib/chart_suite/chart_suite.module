<?php

/**
 * @file
 * Implements the principal entry points and hooks for the module.
 *
 * @defgroup chart_suite Chart Suite
 *
 * @{
 * This module includes file field formatters that use the Structured Data API
 * to read data files and automatically plot them.
 * @}
 *
 * @namespace Drupal::chart_suite
 * Parent namespace for the module.
 *
 * @namespace Drupal::chart_suite::Plugin
 * Plugin functionality.
 *
 * @namespace Drupal::chart_suite::Plugin::Field
 * Field-related plugins.
 *
 * @namespace Drupal::chart_suite::Plugin::Field::FieldFormatter
 * Field formatter plugins.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\chart_suite\Branding;

/**
 * Implements hook_help().
 *
 * This function responds to the help route for the Chart Suite module
 * and provides a single page with multiple sections to document the
 * purpose and uses of the module.
 */
function chart_suite_help(string $routeName, RouteMatchInterface $routeMatch)
{
    //
    // The function returns a render array containing multiple help sections,
    // partly mandated by Drupal best practices.
    //
    // Check the route.
    if ($routeName !== 'help.page.chart_suite') {
        // The route is not part of our help page. Do nothing.
        return;
    }

    // Get module information.
    $moduleTitle = \Drupal::moduleHandler()->getName('chart_suite');
    $imagePath = '/' . drupal_get_path('module', 'chart_suite') . '/images/';

    //
    // About
    // -----
    // This section is recommended by Drupal best practices.
    $help = '';
    $help .= '<h4>' . t('About') . '</h4>';
    $help .= '<p>' . t(
            '<strong>@moduleTitle</strong> provides file field formatters to chart file data for tables, trees, and graphs. A variety of well-known textual file formats are supported, including comma-separated values (CSV), tab-separated values (TSV), HTML tables, and JSON tables, trees, and graphs in common array- and object-style schemas.',
            [
                '@moduleTitle' => $moduleTitle,
            ]) . '</p>';

    //
    // Uses
    // ----
    // This section is recommended by Drupal best practices.
    $help .= '<h4>' . t('Uses') . '</h4>';
    $help .= '<p>' . t(
            "Web site adminstrators may use the <strong>@moduleTitle</strong> module, along with the core <strong>Field UI</strong> and <strong>View UI</strong> modules, to configure the way in which a file field's file data is presented. Once configured, the formatter automatically reads and presents interactive charts of a file's content when the user views a page containing the file field. Charts support line and area plots, scatter plots, bar and pie charts, and tree diagrams.",
            [
                '@moduleTitle' => $moduleTitle,
            ]) . '</p>';

    //
    // Formatters
    // ----------
    // List the formatters.
    //
    // Datetime.
    $help .= '<h4>' . t('Formatters for files') . '</h4>';
    $help .= '<dl class="chart_suite-formatter-list">';

    // -------------------------------------------------------------------.
    $help .= '<dt>' . t('Chart Suite') . '</dt>';
    $image = '<img src="' . $imagePath . 'ChartSuite.png">';
    $help .= '<dd><em>' . $image . t('Supports: file fields.') . '</em></dd>';
    $help .= '<dd>' . t("The formatter presents interactive charts of tables, trees, and graphs read from a field's file. The range of chart types offered to the user varies depending upon the type of data contained in a file being viewed.") . '</dd>';
    $help .= '<dd>' . t("Settings select whether to show a linked file name below the chart, and whether to disable the entire formatter if the field's file cannot be read.") . '</dd>';

    //
    // Render element
    // --------------
    // Return a render element instead of the HTML string itself. This is
    // needed in order to include module libraries to style the help page.
    $page = [
        '#attached' => [
            'library' => [
                'chart_suite.core',
                'chart_suite/chart_suite.help',
            ],
        ],
        'page' => [
            '#type' => 'container',
            '#tree' => TRUE,
            '#attributes' => [
                'class' => ['chart_suite-admin-help'],
            ],
            'branding' => Branding::getBannerBranding(),
            'help' => [
                '#type' => 'html_tag',
                '#tag' => 'div',
                '#value' => $help,
            ],
        ],
    ];

    return $page;
}

/**
 * Implements hook_theme().
 *
 * Responds to several module-specific named themes used to present
 * structured data content. In each case, several parameters are passed
 * to a separate template that implements the theme.
 *
 * The choice of theme is determined by the type of data being
 * presented, such as a table, tree, or graph.
 *
 * In all cases, the 'uri', 'filename', and 'filesize' variables
 * describe the original server-side file and allow the template
 * to include a download link.
 *
 * In all cases, the 'markup' variable holds server-side generated
 * JSON or HTML for the data.
 *
 * In most of the themes, the 'id' variable holds a unique ID
 * for the content. This is typically the entity ID and it enables
 * HTML tagging using the ID so that JavaScript used to present
 * the content can target a specific item on a page, even when
 * that page contains multiple files formatted by these themes.
 *
 * For specific themes, 'title' is the extracted title from the
 * data, and 'xaxis' and 'yaxis' are the extracted axis names (if any)
 * from the data. The 'description' is the file's description,
 * if any.
 */
function chart_suite_theme() {
    return [
        // Format any as HTML
        // ------------------
        // Embed pregenerated HTML generated on the server using data
        // from a table, tree, or graph. This is a fallback theme when
        // there is no clear way to present the data using a JavaScript
        // visualization package.
        'chart_suite_file_formatter_as_html' => [
            'variables'  => [
                'uri'      => NULL,
                'filename' => NULL,
                'filesize' => NULL,
                'dolink'   => NULL,
                'markup'   => NULL,
            ],
            'template'   => 'chart_suite-file-formatter-as-html',
        ],

        // Format tree as visualiation
        // ---------------------------
        // Embed JSON for tree data and invoke a JavaScript visualization
        // package to display it graphically.
        'chart_suite_file_formatter_as_tree' => [
            'variables'     => [
                'uri'         => NULL,
                'filename'    => NULL,
                'filesize'    => NULL,
                'id'          => NULL,
                'title'       => NULL,
                'dolink'      => NULL,
                'description' => NULL,
                'markup'      => NULL,
            ],
            'template'      => 'chart_suite-file-formatter-as-tree',
        ],

        // Format table as visualiation (no named rows)
        // ----------------------------
        // Embed JSON for table data and invoke a JavaScript
        // visualization package to display it graphically.
        //
        // The JSON table does not have a 1st column of strings,
        // so display choices that require named rows (e.g. a
        // pie chart) are not available.
        'chart_suite_file_formatter_as_table' => [
            'variables'     => [
                'uri'         => NULL,
                'filename'    => NULL,
                'filesize'    => NULL,
                'id'          => NULL,
                'title'       => NULL,
                'xaxis'       => NULL,
                'yaxis'       => NULL,
                'dolink'      => NULL,
                'description' => NULL,
                'markup'      => NULL,
            ],
            'template'      => 'chart_suite-file-formatter-as-table',
        ],

        // Format table as visualiation (named rows)
        // ----------------------------
        // Embed JSON for table data and invoke a JavaScript
        // visualization package to display it graphically.
        //
        // The JSON table has a 1st column of strings, so
        // include choices that use named rows (e.g. a pie
        // chart).
        'chart_suite_file_formatter_as_strtable' => [
            'variables'     => [
                'uri'         => NULL,
                'filename'    => NULL,
                'filesize'    => NULL,
                'id'          => NULL,
                'title'       => NULL,
                'xaxis'       => NULL,
                'yaxis'       => NULL,
                'dolink'      => NULL,
                'description' => NULL,
                'markup'      => NULL,
            ],
            'template'      => 'chart_suite-file-formatter-as-strtable',
        ],

        // Format any as search text
        // -------------------------
        // Show simple text for use in building the search
        // index. No HTML or scripts.
        'chart_suite_file_formatter_as_search_index' => [
            'variables'  => [
                'filename' => NULL,
                'markup'   => NULL,
            ],
            'template'   => 'chart_suite-file-formatter-as-search-index',
        ],
    ];
}


